create extension if not exists "pgjwt" with schema "extensions";


create table "public"."computers" (
    "id" bigint generated by default as identity not null,
    "rustdesk_id" numeric not null,
    "name" character varying not null,
    "ip" character varying,
    "last_connection" timestamp without time zone default now(),
    "os" character varying,
    "os_version" character varying,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."computers" enable row level security;

CREATE UNIQUE INDEX computers_name_key ON public.computers USING btree (name);

CREATE UNIQUE INDEX computers_pkey ON public.computers USING btree (id, rustdesk_id);

CREATE UNIQUE INDEX computers_rustdesk_id_key ON public.computers USING btree (rustdesk_id);

alter table "public"."computers" add constraint "computers_pkey" PRIMARY KEY using index "computers_pkey";

alter table "public"."computers" add constraint "computers_name_key" UNIQUE using index "computers_name_key";

alter table "public"."computers" add constraint "computers_rustdesk_id_key" UNIQUE using index "computers_rustdesk_id_key";

grant delete on table "public"."computers" to "anon";

grant insert on table "public"."computers" to "anon";

grant references on table "public"."computers" to "anon";

grant select on table "public"."computers" to "anon";

grant trigger on table "public"."computers" to "anon";

grant truncate on table "public"."computers" to "anon";

grant update on table "public"."computers" to "anon";

grant delete on table "public"."computers" to "authenticated";

grant insert on table "public"."computers" to "authenticated";

grant references on table "public"."computers" to "authenticated";

grant select on table "public"."computers" to "authenticated";

grant trigger on table "public"."computers" to "authenticated";

grant truncate on table "public"."computers" to "authenticated";

grant update on table "public"."computers" to "authenticated";

grant delete on table "public"."computers" to "postgres";

grant insert on table "public"."computers" to "postgres";

grant references on table "public"."computers" to "postgres";

grant select on table "public"."computers" to "postgres";

grant trigger on table "public"."computers" to "postgres";

grant truncate on table "public"."computers" to "postgres";

grant update on table "public"."computers" to "postgres";

grant delete on table "public"."computers" to "service_role";

grant insert on table "public"."computers" to "service_role";

grant references on table "public"."computers" to "service_role";

grant select on table "public"."computers" to "service_role";

grant trigger on table "public"."computers" to "service_role";

grant truncate on table "public"."computers" to "service_role";

grant update on table "public"."computers" to "service_role";

create policy "Enable read access for all authenticated"
on "public"."computers"
as permissive
for select
to authenticated
using (true);



